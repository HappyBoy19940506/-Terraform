pipeline {
    agent {
        label 'agent2'
    }
    //installed Terraform v1.2.5
    parameters {
        choice choices: ['Dev', 'Prod'], description: 'Which Environment are you going to deploy?', name: 'Environment'
        booleanParam description: 'Do you want to run \' Terraform Destroy\'? If so, please tick \'yes\' to make sure.', name: 'Terraform Destroy'
    }
    environment {
        PROJECT_NAME        = "TF_FrontEnd"
        AWS_S3_CREDENTIALS  = "AWS-Credentials-Root-AccessKey"
        AWS_S3_REGION       = "ap-southeast-2"
        EMAIL_RECIPIENT     = "fxy4560654@gmail.com"
    }
    stages {
        stage('Check Terraform Version and Details') {
            options {
                timeout(time: 600, unit: 'SECONDS')
            }
            input {
                message "Everything looks good, ready to terraform apply ?"
                        ok "Yes,Deploy."
            }
            steps {
                sh 'terraform -version'
            }
        }
        stage('Terraform Init') {
            steps {
                dir('./applications'){
                    withAWS(credentials: "${AWS_S3_CREDENTIALS}", region: "${AWS_S3_REGION}"){
                        sh 'terraform workspace new prod'
                        sh 'terraform workspace new dev'
                        sh 'terraform workspace list'
                        sh 'terraform init'
                    }
                }
            }

        }
        stage('Terraform Destroy -dev') {
            when {
                allOf {                        
                expression { params['Terraform Destroy'] == true }
                expression { params['Environment'] == 'Dev' }
                }
            }
            steps {
                dir('./applications'){
                    sh 'terraform workspace select dev'
                    sh 'terraform destroy -var-file terraform-dev.tfvars -auto-approve'
                }
            }
        }
        stage('Terraform Destroy -prod') {
            when {
                allOf {                        
                expression { params['Terraform Destroy'] == true }
                expression { params['Environment'] == 'Prod' }
                }
            }
            steps {
                dir('./applications'){
                    sh 'terraform workspace select prod'
                    sh 'terraform destroy -var-file terraform-prod.tfvars -auto-approve'
                }
            }
        }

        stage('Terraform Apply - Dev') {
            when {
                expression { params['Environment'] == 'Dev' }

            }
            steps {
                dir('./applications'){
                    sh 'terraform workspace select dev'
                    sh 'terraform apply -auto-approve -var-file terraform-dev.tfvars'
                }
            }
        }
        stage('Terraform Apply - Prod') {
            when {                       
                expression { params['Environment'] == 'Prod' }

            }
            steps {
                dir('./applications'){
                    sh 'terraform workspace select prod'
                    sh 'terraform apply -auto-approve -var-file terraform-prod.tfvars'
                }
            }
        }
    }

    post{
        always {
            cleanWs()
        }
        success {
            echo " .................Terraform Apply Successfully..................\n Congratulations! \n you have successfully passed Apply resources via Terraform: \n Project Name:  ${PROJECT_NAME} \n Apply Environemt:  ${params['Environment']}"
            emailext attachLog: true, body: """You get this email because your pipeline job in  
                            project name:  ${ PROJECT_NAME } 

                            working environment:  ${ params['Environment'] } environment

                            has been successfully deployed.

                            Please go AWS to check the results.

                            Please go check the log attached.
                            """, subject: "You have successfully deployed an ${ params['Environment'] } environment in ${ params['Environment'] } branch!!", to: "${ EMAIL_RECIPIENT } "
        }
        failure {
            echo "................Terraform Apply Failed .................\n A job log has been sent to the recipient.\n Please go to your mailbox to check."
            emailext attachLog: true, body: """You get this email because your pipeline job in  
                            project name:  ${ PROJECT_NAME } 

                            working environment:  ${ params['Environment'] } environment

                            has been failed.

                            Please go check the log attached.
                            """, subject: "You have an ${ params['Environment'] } deployment which has been failed in ${ params['Environment'] } branch!", to: "${ EMAIL_RECIPIENT } "
        }
    }

}
